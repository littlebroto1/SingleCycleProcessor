$date
	Fri Nov 25 11:32:50 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var wire 4 ! cond [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var wire 1 " N $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var wire 1 # Z $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var wire 1 $ C $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var wire 1 % V $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module check $end
$var reg 1 & condEx $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module NZ $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module NZ $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module NZ $end
$var wire 1 ) en $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module NZ $end
$var wire 2 * d [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module NZ $end
$var reg 2 + q [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module VC $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module VC $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module VC $end
$var wire 1 , en $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module VC $end
$var wire 2 - d [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$scope module VC $end
$var reg 2 . q [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 & CondEx $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 4 / Flags [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 0 PCS $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 1 RegW $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 2 NoWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 3 MemW $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 2 4 FlagW [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 4 5 Cond [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 4 6 ALUFlags [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 7 PCSrc $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 8 RegWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module condition $end
$var wire 1 9 MemWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module pclogic $end
$var wire 4 : Rd [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module pclogic $end
$var wire 1 ; Branch $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module pclogic $end
$var wire 1 1 RegW $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module pclogic $end
$var wire 1 0 PCS $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var wire 1 < ALUOp $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var wire 4 = cmd [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var wire 1 > S $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var wire 1 2 NoWrite $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var reg 2 ? ALUControl [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$scope module alu_decoder $end
$var reg 2 @ FlagW [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 4 A Rd [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 2 B Op [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 6 C Funct [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 0 PCS $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 1 RegW $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 3 MemW $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 D MemtoReg $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 E ALUSrc $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 2 F ImmSrc [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 2 G RegSrc [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 1 2 NoWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 2 H ALUControl [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module c $end
$scope module decode $end
$var wire 2 I FlagW [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcmux $end
$var wire 32 J d0 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcmux $end
$var wire 32 K d1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcmux $end
$var wire 1 7 s $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcmux $end
$var wire 32 L y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcreg $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcreg $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcreg $end
$var wire 1 M en $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcreg $end
$var wire 32 N d [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module pcreg $end
$var reg 32 O q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra1mux $end
$var wire 4 P d0 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra1mux $end
$var wire 4 Q d1 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra1mux $end
$var wire 1 R s $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra1mux $end
$var wire 4 S y [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra2mux $end
$var wire 4 T d0 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra2mux $end
$var wire 4 U d1 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra2mux $end
$var wire 1 V s $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module ra2mux $end
$var wire 4 W y [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 1 8 we3 $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 4 X ra1 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 4 Y ra2 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 4 Z wa3 [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 32 [ wd3 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 32 \ r15 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 32 ] rd1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module rf $end
$var wire 32 ^ rd2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module resmux $end
$var wire 32 _ d0 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module resmux $end
$var wire 32 ` d1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module resmux $end
$var wire 1 D s $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module resmux $end
$var wire 32 a y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module srcbmux $end
$var wire 32 b d0 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module srcbmux $end
$var wire 32 c d1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module srcbmux $end
$var wire 1 E s $end
$upscope $end
$upscope $end
$upscope $end
$scope module ARM $end
$scope module dp $end
$scope module srcbmux $end
$var wire 32 d y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d
bx c
bx b
bx a
bz `
bx _
bx ^
bx ]
bx \
bx [
bz Z
bz Y
bx X
bz W
xV
bz U
bz T
bx S
xR
b1111 Q
bz P
bx O
bx N
1M
bx L
bx K
bx J
b0 I
b0 H
bx G
bx F
xE
xD
bz C
bz B
bz A
b0 @
b0 ?
z>
bz =
x<
x;
bz :
x9
x8
x7
bx 6
bz 5
b0 4
x3
x2
x1
x0
bx /
bx .
bx -
0,
bx +
bx *
0)
z(
1'
x&
x%
x$
x#
x"
bz !
$end
#5000000
0'
#10000000
1'
#15000000
0'
#15000001
