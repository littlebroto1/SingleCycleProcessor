$date
	Tue Nov 15 11:35:00 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ConditionLogic $end
$scope module check $end
$var wire 4 ! cond [3:0] $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module check $end
$var wire 1 " N $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module check $end
$var wire 1 # Z $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module check $end
$var wire 1 $ C $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module check $end
$var wire 1 % V $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module check $end
$var reg 1 & condEx $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module NZ $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module NZ $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module NZ $end
$var wire 1 ) en $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module NZ $end
$var wire 2 * d [1:0] $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module NZ $end
$var reg 2 + q [1:0] $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module VC $end
$var wire 1 ' clk $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module VC $end
$var wire 1 ( reset $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module VC $end
$var wire 1 , en $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module VC $end
$var wire 2 - d [1:0] $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$scope module VC $end
$var reg 2 . q [1:0] $end
$upscope $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 ' clk $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 ( reset $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 & CondEx $end
$upscope $end
$scope module ConditionLogic $end
$var wire 4 / Flags [3:0] $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 0 PCS $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 1 RegW $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 2 NoWrite $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 3 MemW $end
$upscope $end
$scope module ConditionLogic $end
$var wire 2 4 FlagW [1:0] $end
$upscope $end
$scope module ConditionLogic $end
$var wire 4 5 Cond [3:0] $end
$upscope $end
$scope module ConditionLogic $end
$var wire 4 6 ALUFlags [3:0] $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 7 PCSrc $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 8 RegWrite $end
$upscope $end
$scope module ConditionLogic $end
$var wire 1 9 MemWrite $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x9
x8
x7
bz 6
bz 5
bz 4
z3
z2
z1
z0
bx /
bx .
bz -
x,
bx +
bz *
x)
z(
1'
x&
x%
x$
x#
x"
bz !
$end
#5000000
0'
#10000000
1'
#15000000
0'
#15000001
